#pragma checksum "D:\Marolix\Projects\SCASA\Project\SCASA\Views\Staff\StaffLoansData.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d553b60e8924ca6a16a562c3f52343ecae2cc3db"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Staff_StaffLoansData), @"mvc.1.0.view", @"/Views/Staff/StaffLoansData.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Marolix\Projects\SCASA\Project\SCASA\Views\_ViewImports.cshtml"
using SCASA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Marolix\Projects\SCASA\Project\SCASA\Views\_ViewImports.cshtml"
using SCASA.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d553b60e8924ca6a16a562c3f52343ecae2cc3db", @"/Views/Staff/StaffLoansData.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"61f59c02fdbf6895e021479e28253e13dd514c2e", @"/Views/_ViewImports.cshtml")]
    public class Views_Staff_StaffLoansData : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<SCASA.Models.Repositories.Entity.StaffLoans>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("btn btn-add"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Staff/StaffLoans"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "EMI", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Single", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""content-wrapper"">
    <!-- Content Header (Page header) -->
    <section class=""content-header"">
        <div class=""header-icon"">
            <i class=""fa fa-dashboard""></i>
        </div>
        <div class=""header-title"">
            <h1>Add Staff Loan</h1>
            <small></small>
        </div>
    </section>
    <!-- Main content -->
    <div class=""content"">
        <div class=""row"">
            <!-- Form controls -->
            <div class=""col-sm-12"">
                <div class=""card all_btn_card"" id=""lobicard-custom-control1"" data-sortable=""true"">
                    <div class=""card-header all_card_btn"">
                        <div class=""row"">
                            <div class=""card-title custom_title col-sm-6"">
                                <h5>Add Staff Loan</h5>
                            </div>
                            <div class=""col-md-6"">
                                <div class=""btn-group float-right"" role=""group"">
                      ");
            WriteLiteral("              <div class=\"buttonexport\" id=\"buttonlist\">\r\n                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d553b60e8924ca6a16a562c3f52343ecae2cc3db6022", async() => {
                WriteLiteral("\r\n                                            <i class=\"fa fa-reply mr-2\"></i>Back\r\n                                        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d553b60e8924ca6a16a562c3f52343ecae2cc3db7567", async() => {
                WriteLiteral("\r\n                            ");
#nullable restore
#line 37 "D:\Marolix\Projects\SCASA\Project\SCASA\Views\Staff\StaffLoansData.cshtml"
                       Write(Html.HiddenFor(m => m.LoanId));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
                            <div class=""row"">
                                <div class=""col-sm-3"">
                                    <div class=""form-group"">
                                        <label>Staff Name</label>
                                        ");
#nullable restore
#line 42 "D:\Marolix\Projects\SCASA\Project\SCASA\Views\Staff\StaffLoansData.cshtml"
                                   Write(Html.DropDownList("sId", new SelectList(ViewBag.Loans, "UserId", "UserName", "0"), new { @id = "sId", @class = "form-control select2" }));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"

                                    </div>
                                </div>
                                <div class=""col-sm-3"">
                                    <div class=""form-group"">
                                        <label>Loan Amount</label>
                                        <input type=""number"" placeholder=""Enter Loan Amount"" class=""form-control"" id=""amount"" />
                                        ");
#nullable restore
#line 50 "D:\Marolix\Projects\SCASA\Project\SCASA\Views\Staff\StaffLoansData.cshtml"
                                   Write(Html.ValidationMessageFor(m => m.AmountTaken, null, new { @class = "text-danger" }));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
                                        <div class=""text-danger"">
                                            <p id=""amtErmMsg""></p>
                                        </div>
                                    </div>
                                </div>
                                <div class=""col-sm-3"">
                                    <div class=""form-group"">
                                        <label>Repayment Mode</label>
                                        <select class=""form-control"" name=""RepaymentMode"" id=""RepaymentMode"" onchange=""ShowEMI()"">
                                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d553b60e8924ca6a16a562c3f52343ecae2cc3db10183", async() => {
                    WriteLiteral("EMI");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d553b60e8924ca6a16a562c3f52343ecae2cc3db11448", async() => {
                    WriteLiteral("Single");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

                                        </select>
                                    </div>

                                </div>
                                <div class=""col-sm-3"">
                                    <div class=""form-group"">
                                        <label>No Of Months</label>
                                        <input type=""number"" placeholder=""Enter No Of Months"" class=""form-control"" id=""nom"" oninput=""ShowEMI()""/>
                                        ");
#nullable restore
#line 71 "D:\Marolix\Projects\SCASA\Project\SCASA\Views\Staff\StaffLoansData.cshtml"
                                   Write(Html.ValidationMessageFor(m => m.NoofMonths, null, new { @class = "text-danger" }));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
                                        <div class=""text-danger""><p id=""nomErmMsg""></p></div>
                                    </div>
                                </div>
                                <div class=""col-sm-3"">
                                    <label>Monthly Emi</label>
                                    <input type=""text"" class=""form-control"" id=""MEmi"" disabled />
                                </div>
                                <div class=""col-sm-3"">
                                    <div class=""form-group"">
                                        <label>Remarks</label>
                                        ");
#nullable restore
#line 82 "D:\Marolix\Projects\SCASA\Project\SCASA\Views\Staff\StaffLoansData.cshtml"
                                   Write(Html.TextBox("remark", null, new { @placeholder = "Enter Remarks", @class = "form-control", @id = "remark"}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
                                    </div>
                                </div>
                                <div class=""col-sm-3"">
                                    <button type=""button"" class=""btn btn-success serchgaptop"" onclick=""SaveLoan()""> Save</button>
                                </div>
                            </div>
                        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        <div class=""text-danger"">
                            <p id=""emsg""></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.content -->
</div>
<script>
    $('.select2').select2();
    function ShowEMI() {
        var amot = parseInt($(""#amount"").val());
        var noms = parseInt($(""#nom"").val());
        var retTyp = $('#RepaymentMode').val();
        if (amot <= 0 || isNaN(amot)) {
        } else {
            if (retTyp == ""Single"") {
                $(""#MEmi"").attr(""value"", amot);
                $(""#nom"").val(1);
                $(""#nom"").prop(""readonly"",true);
            } else {
                if (noms < 0 || isNaN(noms)) {
                    $(""#nom"").val(12);
                    var e = amot / 12;
                    $(""#MEmi"").attr(""value"", e);
                } else {
                    if (noms == 1) {
                        $(""#nom"").val(12);
        ");
            WriteLiteral(@"            }
                    $(""#nom"").prop(""readonly"", false);
                    var n = parseInt($(""#nom"").val());
                    var e = amot / n;
                    $(""#MEmi"").attr(""value"", e);
                }
            }
        }
    }
    function SaveLoan() {
        var amot = parseInt($(""#amount"").val());
        var noms = parseInt($(""#nom"").val());
        var retTyp = $('#RepaymentMode').val();
        if (amot <= 0 || isNaN(amot)) {
            $(""#amtErmMsg"").text(""Please Enter Valid Amount"");
        } else {
            if (noms <= 0 || isNaN(noms)) {
                $(""#nomErmMsg"").text(""Please Enter Valid Number"")
            } else {
                $.ajax({
                    url: GlobalUrl + ""Staff/CheckAvailbilityForLoan"",
                    type: 'post',
                    data: {
                        'sId': $('#sId option:selected').val(),
                    },
                    success: function (res) {
                        if (r");
            WriteLiteral(@"es.amount != 0) {
                            if (res.s != 0) {
                                if (res.singleEMIExists == false) {
                                    if ($(""#RepaymentMode"").val() == ""EMI"") {
                                        if (noms >= 2) {
                                            var totAmt = res.amount + amot;
                                            var thisEMI = amot / noms;
                                            var totalEMI = res.emi + thisEMI;
                                            if (res.s > totalEMI) {

                                                var msg = ""Mr/Ms "" + res.name + "" has already Taken a Loan Amount of  "" + res.amount + ""\n"" + res.name + ""'s Salary is : "" + res.s + ""\n"" + res.name + "" ' s already EMI is : "" + res.emi + ""\n new EMI Will be : "" + totalEMI + ""\n Are You Sure To Give Loan Again""
                                                swal(msg, {
                                                    buttons: {
                 ");
            WriteLiteral(@"                                       yes: {
                                                            text: ""Give"",
                                                            value: ""yes""
                                                        },
                                                        no: {
                                                            text: ""Reject"",
                                                            value: ""no""
                                                        }
                                                    }
                                                }).then((value) => {
                                                    if (value === ""yes"") {
                                                        $.ajax({
                                                            url: GlobalUrl + ""Staff/CreateStaffLoan"",
                                                            type: 'post',
                                                   ");
            WriteLiteral(@"         data: {
                                                                'StaffId': $('#sId option:selected').val(),
                                                                'AmountTaken': $('#amount').val(),
                                                                'RepaymentMode': $('#RepaymentMode').val(),
                                                                'NoofMonths': $('#nom').val(),
                                                                'Remarks': $('#remark').val(),
                                                            },
                                                            success: function (res) {
                                                                if (res.result.statusCode == 1) {
                                                                    window.location = ""StaffLoans"";
                                                                } else {
                                                                    toa");
            WriteLiteral(@"str[""error""](""Please Try Again!"")
                                                                }
                                                            }
                                                        });
                                                    } else {
                                                        toastr[""error""](""Loan Rejected!"")
                                                    }
                                                });
                                            } else { $(""#emsg"").text(""Total EMI will be Greater than "" + res.name + ""'s Salary""); }
                                        } else { $(""#nomErmMsg"").text(""Please Enter Correct Number Of Months for Emi ""); }
                                    } else if ($(""#RepaymentMode"").val() == ""Single"") {
                                        var totAmt = res.amount + amot;
                                        var totalEMI = res.emi + amot;
                                        if (re");
            WriteLiteral(@"s.s > totalEMI) {
                                            var msg = ""Mr/Ms "" + res.name + "" has already Taken a Loan Amount of  "" + res.amount + ""\n"" + res.name + ""'s Salary is : "" + res.s + ""\n"" + res.name + "" ' s already EMI is : "" + res.emi + ""\n Next Month Deductions Will be : "" + totalEMI + ""\n Are You Sure To Give Loan Again""
                                            swal(msg, {
                                                buttons: {
                                                    yes: {
                                                        text: ""Give"",
                                                        value: ""yes""
                                                    },
                                                    no: {
                                                        text: ""Reject"",
                                                        value: ""no""
                                                    }
                                                }
   ");
            WriteLiteral(@"                                         }).then((value) => {
                                                if (value === ""yes"") {
                                                    $.ajax({
                                                        url: GlobalUrl + ""Staff/CreateStaffLoan"",
                                                        type: 'post',
                                                        data: {
                                                            'StaffId': $('#sId option:selected').val(),
                                                            'AmountTaken': $('#amount').val(),
                                                            'RepaymentMode': $('#RepaymentMode').val(),
                                                            'NoofMonths': $('#nom').val(),
                                                            'Remarks': $('#remark').val(),
                                                        },
                                          ");
            WriteLiteral(@"              success: function (res) {
                                                            if (res.result.statusCode == 1) {
                                                                window.location = ""StaffLoans"";
                                                            } else {
                                                                toastr[""error""](""Please Try Again!"")
                                                            }
                                                        }
                                                    });
                                                } else {
                                                    toastr[""error""](""Loan Rejected!"")
                                                }
                                            });
                                        } else { $(""#emsg"").text(""Next Month Deductions will be Greater than "" + res.name + ""'s Salary""); }
                                    }
               ");
            WriteLiteral(@"                 }
                                else {
                                    var totAmt = res.amount + amot;
                                    var totalEMI = res.emi + res.singleAmt;
                                    if (retTyp == ""Single"") {
                                        totalEMI += amot;
                                    } else {
                                        var em = amot / noms;
                                        totalEMI += em;
                                    }
                                    if (res.s > totalEMI) {

                                        var msg = ""Mr/Ms "" + res.name + "" has already Taken a Loan Amount of  "" + res.amount + ""\n He/She has taken a single Payment Loan of : "" + res.singleAmt + ""\n"" + res.name + ""'s Salary is : "" + res.s + ""\n"" + res.name + "" ' s already EMI is : "" + (res.emi + res.singleAmt) + ""\n Next Month Deductions Will be : "" + totalEMI + ""\n Are You Sure To Give Loan Again""
                         ");
            WriteLiteral(@"               swal(msg, {
                                            buttons: {
                                                yes: {
                                                    text: ""Give"",
                                                    value: ""yes""
                                                },
                                                no: {
                                                    text: ""Reject"",
                                                    value: ""no""
                                                }
                                            }
                                        }).then((value) => {
                                            if (value === ""yes"") {
                                                $.ajax({
                                                    url: GlobalUrl + ""Staff/CreateStaffLoan"",
                                                    type: 'post',
                                                    data: {
 ");
            WriteLiteral(@"                                                       'StaffId': $('#sId option:selected').val(),
                                                        'AmountTaken': $('#amount').val(),
                                                        'RepaymentMode': $('#RepaymentMode').val(),
                                                        'NoofMonths': $('#nom').val(),
                                                        'Remarks': $('#remark').val(),
                                                    },
                                                    success: function (res) {
                                                        if (res.result.statusCode == 1) {
                                                            window.location = ""StaffLoans"";
                                                        } else {
                                                            toastr[""error""](""Please Try Again!"")
                                                        }
             ");
            WriteLiteral(@"                                       }
                                                });
                                            } else {
                                                toastr[""error""](""Loan Rejected!"")
                                            }
                                        });
                                    } else { $(""#emsg"").text(""Next Month Deductions will be Greater than "" + res.name + ""'s Salary""); }
                                }
                            } else {
                                $(""#emsg"").text(""Salary for the Employee is not assigned"");
                            }
                        } else {
                            if ($(""#RepaymentMode"").val() == ""Single"") {
                                    if (res.s > amot) {
                                        $.ajax({
                                            url: GlobalUrl + ""Staff/CreateStaffLoan"",
                                            type: 'post',
     ");
            WriteLiteral(@"                                       data: {
                                                'StaffId': $('#sId option:selected').val(),
                                                'AmountTaken': $('#amount').val(),
                                                'RepaymentMode': $('#RepaymentMode').val(),
                                                'NoofMonths': $('#nom').val(),
                                                'Remarks': $('#remark').val(),
                                            },
                                            success: function (res) {
                                                if (res.result.statusCode == 1) {
                                                    window.location = ""StaffLoans"";
                                                } else {
                                                    toastr[""error""](""Please Try Again!"")
                                                }
                                            }
             ");
            WriteLiteral(@"                           });
                                    } else {
                                        $(""#emsg"").text(""Loan Is Greater than  "" + res.name + ""'s Salary"");
                                    }
                                }
                            else if ($(""#RepaymentMode"").val() == ""EMI"") {
                                if (noms > 1) {
                                    var memi = amot / noms;
                                    if (res.s > memi) {
                                        $.ajax({
                                            url: GlobalUrl + ""Staff/CreateStaffLoan"",
                                            type: 'post',
                                            data: {
                                                'StaffId': $('#sId option:selected').val(),
                                                'AmountTaken': $('#amount').val(),
                                                'RepaymentMode': $('#RepaymentMode').val(),
 ");
            WriteLiteral(@"                                               'NoofMonths': $('#nom').val(),
                                                'Remarks': $('#remark').val(),
                                            },
                                            success: function (res) {
                                                if (res.result.statusCode == 1) {
                                                    window.location = ""StaffLoans"";
                                                } else {
                                                    toastr[""error""](""Please Try Again!"")
                                                }
                                            }
                                        });
                                    } else {
                                        $(""#emsg"").text(""Monthly EMI is greater than  "" + res.name + ""'s Salary"")
                                    }
                                }
                                else {
            ");
            WriteLiteral(@"                        $(""#nomErmMsg"").text(""Please Enter Valid Number Of Months"");
                                }
                            }                            
                        }
                    }
                });
            }
        }
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<SCASA.Models.Repositories.Entity.StaffLoans> Html { get; private set; }
    }
}
#pragma warning restore 1591
